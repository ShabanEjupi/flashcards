# Siguria e Pajisjeve IoT: Sfidat, Sulmet dhe Teknikat e Mbrojtjes

**Autor: Shaban Ejupi**

**Data: 25 Maj, 2025**

---

## Përmbajtja

1. Abstrakt
2. Hyrje
3. Arkitektura e IoT dhe Sipërfaqet e Rrezikut
4. Dobësitë Kryesore të Sigurisë në Pajisjet IoT
   4.1 Kredencialet Default të Pasigurta
   4.2 Komunikimi Pa Enkriptim
   4.3 Menaxhimi i Dobët i Përditësimeve
   4.4 Mungesa e Segmentimit të Rrjetit
   4.5 Modeli STRIDE për Vlerësimin e Kërcënimeve
5. Demonstrimi i Sulmeve dhe Zgjidhjet
   5.1 Sulmi "Man-in-the-Middle" në MQTT pa TLS
   5.2 Implementimi i mutual-TLS për MQTT
   5.3 Dobësitë e CoAP dhe Mbrojtja me DTLS
6. Teknologjitë dhe Praktikat e Mbrojtjes
   6.1 ARM PSA dhe Framework-et e Sigurisë
   6.2 Autentikimi me OAuth2.0 dhe JWT
   6.3 Monitorimi i Anomalive në IoT
7. Konkluzione dhe Rekomandime
8. Referencat

---

## 1. Abstrakt

Ky raport analizon aspektet kryesore të sigurisë në pajisjet Internet of Things (IoT), duke përfshirë dobësitë e zakonshme, modelet e sulmeve dhe teknikat e mbrojtjes. Përmes shembujve konkretë, demostrohen sulmet në protokollet MQTT dhe CoAP, si dhe implementimi i zgjedhjeve efektive si mutual-TLS dhe DTLS. Raporti diskuton gjithashtu teknologjitë moderne të sigurisë si ARM PSA, autentikimi me OAuth2.0/JWT dhe monitorimi i rrjetit për mbrojtjen e ekosistemit IoT. Përfundimisht, ofrohen rekomandime praktike për zbatimin e sigurisë "by-design" në projektet IoT.

## 2. Hyrje

Internet of Things (IoT) përfaqëson një revolucion në teknologji, duke mundësuar lidhjen e miliarda pajisjeve në internet. Sipas raporteve të fundit, deri në vitin 2025 pritet të ketë mbi 75 miliardë pajisje IoT të lidhura globalisht. Megjithatë, rritja e shpejtë e këtij ekosistemi ka krijuar sfida serioze të sigurisë.

Ky raport do të analizojë:
- Arkitekturën tipike IoT dhe sipërfaqet e sulmit
- Dobësitë kryesore të sigurisë në pajisjet IoT
- Demonstrimin e sulmeve në protokollet MQTT dhe CoAP
- Teknologjitë dhe praktikat moderne të mbrojtjes
- Rekomandimet për zbatimin e sigurisë efektive në IoT

Fokusi i këtij punimi është identifikimi i kërcënimeve kryesore të sigurisë dhe ofrimi i zgjidhjeve praktike që mund të implementohen në projekte reale.

## 3. Arkitektura e IoT dhe Sipërfaqet e Rrezikut

Arkitektura tipike e IoT përbëhet nga katër komponentë kryesorë:

1. **Pajisjet/Sensorët** - Mbledhin të dhëna dhe ekzekutojnë komanda
2. **Gateway-t** - Lidhja midis pajisjeve dhe internetit
3. **Cloud/Backend** - Procesimi dhe ruajtja e të dhënave
4. **Aplikacionet Mobile/Web** - Ndërfaqet e përdoruesit

Çdo komponent paraqet sipërfaqe të ndryshme rreziku:

**Pajisjet/Sensorët:**
- Ndërfaqet fizike (UART, JTAG, SPI)
- Firmware i pasigurt
- Kredenciale të dobëta default

**Gateway-t:**
- Protokolle komunikimi pa enkriptim (MQTT, CoAP)
- Mungesa e autentikimit të fortë
- Siguria e sistemit operativ

**Cloud/Backend:**
- API të pasigurta
- Menaxhim i dobët i çelësave
- Mungesa e monitorimit për anomali

**Aplikacionet:**
- Ruajtja e pasigurt e të dhënave lokale
- Autentikimi i dobët
- Komunikimi i pasigurt me backend

## 4. Dobësitë Kryesore të Sigurisë në Pajisjet IoT

### 4.1 Kredencialet Default të Pasigurta

Shumë pajisje IoT vijnë me kredenciale të paracaktuara si "admin/admin" ose "root/1234". Këto kredenciale rrallë ndryshohen nga përdoruesit dhe shpesh janë të dokumentuara publikisht. Sulmi i famshëm Mirai Botnet (2016) shfrytëzoi pikërisht këtë dobësi, duke kompromentuar qindra mijëra pajisje IoT për të kryer sulme DDoS.

Studimi i OWASP IoT Top 10 (2023) identifikoi kredencialet e pasigurta si një nga dobësitë më të përhapura në ekosistemin IoT.

### 4.2 Komunikimi Pa Enkriptim

Shumë pajisje IoT përdorin protokolle komunikimi pa enkriptim:
- MQTT në portin 1883 (pa TLS)
- CoAP në portin 5683 (pa DTLS)
- HTTP në vend të HTTPS

Sipas IoT Security Foundation (2022), rreth 37% e pajisjeve IoT transmetojnë të dhëna sensitive pa enkriptim. Kjo u mundëson sulmuesve të kapin të dhënat nëpërmjet sulmeve "man-in-the-middle".

### 4.3 Menaxhimi i Dobët i Përditësimeve

Shumë pajisje IoT ose nuk marrin përditësime fare, ose përdorin mekanizma të pasigurt për përditësim:
- Përditësime të paenkriptuara
- Mungesa e verifikimit të integritetit
- Mungesa e rollback protection
- Procese manuale të përditësimit që rrallë zbatohen

Një studim nga ETSI tregoi se 83% e pajisjeve të konsumatorëve nuk kishin mekanizma të sigurt përditësimi.

### 4.4 Mungesa e Segmentimit të Rrjetit

Pajisjet IoT shpesh vendosen në të njëjtin rrjet me pajisjet kritike, pa ndarje ose segmentim të përshtatshëm:
- Pa VLAN për izolimin e pajisjeve IoT
- Pa filtra ose firewall midis segmenteve
- Qasje e pakontrolluar në resurset e brendshme

Kjo dobësi u mundëson sulmuesve të përdorin pajisjet IoT si pikë hyrjeje për të kompromentuar sisteme më të rëndësishme.

### 4.5 Modeli STRIDE për Vlerësimin e Kërcënimeve

Modeli STRIDE është një metodologji efektive për identifikimin e kërcënimeve të sigurisë në sistemet IoT:

- **S**poofing (Falsifikimi i identitetit)
- **T**ampering (Manipulimi i të dhënave)
- **R**epudiation (Mohimi i veprimeve)
- **I**nformation Disclosure (Zbulimi i informacionit)
- **D**enial of Service (Mohimi i shërbimit)
- **E**levation of Privilege (Rritja e privilegjeve)

Për çdo komponent të sistemit IoT duhet të analizohen kërcënimet potenciale sipas kategorive STRIDE, dhe të zbatohen kontrollet e duhura të sigurisë.

## 5. Demonstrimi i Sulmeve dhe Zgjidhjet

### 5.1 Sulmi "Man-in-the-Middle" në MQTT pa TLS

**Skenari i sulmit:**

Një pajisje IoT (termometër inteligjent) dërgon të dhëna temperature nëpërmjet MQTT pa enkriptim:

```python
# Kodi i pajisjes së pasigurt (iot_publisher.py)
import paho.mqtt.client as mqtt
import time, random, json

# Lidhja me brokerin MQTT në portin e pasigurt 1883
client = mqtt.Client()
client.connect("test.mosquitto.org", 1883, 60)

# Publikimi i të dhënave të temperaturës
while True:
    temperature = round(20 + random.random() * 10, 2)
    humidity = round(40 + random.random() * 20, 2)
    payload = json.dumps({
        "device_id": "thermostat_001",
        "temperature": temperature,
        "humidity": humidity,
        "timestamp": time.time()
    })
    client.publish("home/livingroom/temperature", payload)
    time.sleep(5)
```

**Sulmi me Wireshark:**

Një sulmues në të njëjtin rrjet mund të përdorë Wireshark për të kapur paketat MQTT dhe për të ekstraktuar të dhënat e temperaturës, duke shkelur privatësinë e përdoruesit.

**Shkriptë për përgjim të trafikut MQTT:**

```python
# Kodi i sulmuesit (mqtt_sniffer.py)
from scapy.all import *
from scapy.layers.mqtt import *

def packet_callback(packet):
    if packet.haslayer(TCP) and packet.haslayer(Raw):
        if packet[TCP].dport == 1883 or packet[TCP].sport == 1883:
            try:
                # Tenton të parsojë paketat MQTT
                mqtt_packet = MQTT(packet[Raw].load)
                if mqtt_packet.type == 3:  # PUBLISH
                    print(f"Kapur mesazh MQTT: {mqtt_packet.value}")
            except:
                pass

# Fillon përgjimin e trafikut
print("Duke filluar përgjimin e MQTT...")
sniff(filter="tcp port 1883", prn=packet_callback)
```

### 5.2 Implementimi i mutual-TLS për MQTT

**Gjenerimi i certifikatave:**

```bash
# Krijimi i CA (Certificate Authority)
openssl req -x509 -newkey rsa:2048 -days 365 -nodes \
  -keyout ca.key -out ca.crt -subj "/CN=MyIoTCA"

# Krijimi i certifikatës së serverit
openssl req -newkey rsa:2048 -nodes -keyout server.key \
  -out server.csr -subj "/CN=mqtt.example.com"
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \
  -CAcreateserial -out server.crt -days 365

# Krijimi i certifikatës së klientit
openssl req -newkey rsa:2048 -nodes -keyout client.key \
  -out client.csr -subj "/CN=thermostat_001"
openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key \
  -CAcreateserial -out client.crt -days 365
```

**Konfigurimi i MQTT me TLS:**

```python
# Kodi i pajisjes së sigurt (iot_publisher_secure.py)
import paho.mqtt.client as mqtt
import time, random, json

# Konfigurimi i TLS me certifikatat e klientit
client = mqtt.Client()
client.tls_set(
    ca_certs="ca.crt",
    certfile="client.crt",
    keyfile="client.key"
)

# Lidhja me brokerin MQTT në portin e sigurt 8883
client.connect("test.mosquitto.org", 8883, 60)

# Publikimi i të dhënave të temperaturës (tani të enkriptuara)
while True:
    temperature = round(20 + random.random() * 10, 2)
    humidity = round(40 + random.random() * 20, 2)
    payload = json.dumps({
        "device_id": "thermostat_001",
        "temperature": temperature,
        "humidity": humidity,
        "timestamp": time.time()
    })
    client.publish("home/livingroom/temperature", payload)
    time.sleep(5)
```

Pas implementimit të TLS, përgjimi me Wireshark tregon vetëm trafik të enkriptuar që nuk mund të dekriptohet nga sulmuesit.

### 5.3 Dobësitë e CoAP dhe Mbrojtja me DTLS

CoAP (Constrained Application Protocol) është një protokoll i lehtë për pajisje me resurse të kufizuara. Pa DTLS (Datagram TLS), CoAP është i ngjashëm me MQTT në aspektin e dobësive të sigurisë.

**Implementimi i CoAP me DTLS:**

```python
# Kodi i pajisjes CoAP të sigurt
import asyncio
import json, time, random
from aiocoap import Context, Message
import aiocoap.numbers.codes as codes
from aiocoap.credentials import DTLSCredentials

async def send_data():
    # Krijimi i kontekstit të klientit me DTLS
    client_credentials = DTLSCredentials(
        private_key_file="client.key",
        certificate_file="client.crt",
        ca_file="ca.crt"
    )
    
    client = await Context.create_client_context(client_credentials)
    
    while True:
        data = {
            "device_id": "thermostat_001",
            "temperature": round(20 + random.random() * 10, 2),
            "humidity": round(40 + random.random() * 20, 2),
            "timestamp": time.time()
        }
        
        # Krijimi i mesazhit CoAP me DTLS
        payload = json.dumps(data).encode('utf8')
        request = Message(
            code=codes.PUT,
            payload=payload,
            uri='coaps://coap.example.org:5684/sensors/temperature'
        )
        
        # Dërgimi i të dhënave të enkriptuara
        try:
            response = await client.request(request).response
            print(f"Rezultati: {response.code}")
        except Exception as e:
            print(f"Gabim: {e}")
            
        await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(send_data())
```

## 6. Teknologjitë dhe Praktikat e Mbrojtjes

### 6.1 ARM PSA dhe Framework-et e Sigurisë

ARM Platform Security Architecture (PSA) ofron një kornizë gjithëpërfshirëse për zhvillimin e pajisjeve IoT të sigurta:

- **Root of Trust** - Bazuar në hardware për mbrojtje nga manipulimi
- **Secure Boot** - Sigurohet që vetëm software i autorizuar ekzekutohet
- **Trusted Execution Environment (TEE)** - Izolon ekzekutimin e kodit të ndjeshëm
- **Crypto API** - Standardizon operacionet kriptografike

Zephyr RTOS, një sistem operativ për pajisje me resurse të kufizuara, integron PSA dhe ofron:
- Memory Protection Units (MPU)
- Secure Storage
- Privileged/Unprivileged Execution
- Resource Isolation

### 6.2 Autentikimi me OAuth2.0 dhe JWT

OAuth2.0 dhe JSON Web Tokens (JWT) ofrojnë një zgjidhje të shkallëzueshme për autentikim dhe autorizim në pajisjet IoT:

**Implementimi i OAuth2.0 Client Credentials Flow:**

```python
import requests
import paho.mqtt.client as mqtt
import json

# Merrni token-in nga Authorization Server
def get_oauth_token():
    response = requests.post(
        "https://auth.example.com/oauth/token",
        data={
            "grant_type": "client_credentials",
            "client_id": "thermostat_001",
            "client_secret": "device_secret",
            "scope": "publish:temperature"
        }
    )
    return response.json()["access_token"]

# Përdorni token-in për lidhje me MQTT broker
def connect_with_token():
    token = get_oauth_token()
    
    client = mqtt.Client()
    client.tls_set(ca_certs="ca.crt")
    client.username_pw_set(username="unused", password=token)
    client.connect("mqtt.example.com", 8883, 60)
    
    # Tani mund të publikoni mesazhe
    client.publish("home/livingroom/temperature", json.dumps({
        "temperature": 22.5,
        "humidity": 45
    }))

connect_with_token()
```

**Përfitimet e OAuth2.0/JWT në IoT:**
- Centralizimi i autentikimit dhe autorizimit
- Tokenët me afat të kufizuar (reduced attack window)
- Granular scopes për kontroll të detajuar të qasjes
- Revokimi i lehtë i tokenëve komprometues

### 6.3 Monitorimi i Anomalive në IoT

Monitorimi i anomalive është thelbësor për zbulimin e sulmeve në sistemet IoT:

**Përdorimi i Zeek për monitorimin e MQTT:**

```
# Skriptë Zeek (mqtt-monitor.zeek)
@load base/protocols/mqtt

event mqtt_connect(c: connection, msg: MQTT::ConnectMsg)
{
    print fmt("MQTT Connect: %s -> %s (client_id: %s)", 
              c$id$orig_h, c$id$resp_h, msg$client_id);
    
    if (msg$client_id !in authorized_clients)
        alert("Unauthorized MQTT client: " + msg$client_id);
}

event mqtt_publish(c: connection, msg: MQTT::PublishMsg)
{
    print fmt("MQTT Publish: %s -> %s (topic: %s)", 
              c$id$orig_h, c$id$resp_h, msg$topic);
    
    # Kontrolli i frekuencës së mesazheve për DoS
    if (msg$topic in topic_frequency)
    {
        if (network_time() - topic_frequency[msg$topic]$last_time < 1.0)
        {
            topic_frequency[msg$topic]$count += 1;
            if (topic_frequency[msg$topic]$count > 10)
                alert("Possible MQTT DoS on topic: " + msg$topic);
        }
        else
        {
            topic_frequency[msg$topic]$count = 1;
        }
        
        topic_frequency[msg$topic]$last_time = network_time();
    }
    else
    {
        topic_frequency[msg$topic] = [$count=1, $last_time=network_time()];
    }
}
```

**Monitorimi me Elastic Stack (ELK):**
- **Beats** (Filebeat, Packetbeat) për mbledhjen e të dhënave
- **Logstash** për përpunimin dhe normalizimin
- **Elasticsearch** për ruajtje dhe kërkim
- **Kibana** për vizualizim dhe dashboard

**Shembuj anomalish për monitorim:**
- Rritje e papritur në frekuencën e mesazheve
- Ndryshim i papritur në modelet e komunikimit
- Tentativa të shumta për lidhje me kredenciale të gabuara
- Përdorimi i protokolleve të pasigurta

## 7. Konkluzione dhe Rekomandime

Siguria e pajisjeve IoT mbetet një sfidë e madhe, por me zbatimin e praktikave të duhura, mund të zvogëlohen ndjeshëm rreziqet:

**Rekomandimet kryesore:**

1. **Siguria By-Design:** Integroni sigurinë që nga fillimi i projektimit, jo si shtesë e mëvonshme.

2. **Enkriptimi i Komunikimit:** Përdorni gjithmonë TLS/DTLS për të mbrojtur të dhënat në transit.

3. **Autentikimi i Fortë:** Implementoni autentikim mutual duke përdorur çertifikata ose OAuth2.0/JWT.

4. **Segmentimi i Rrjetit:** Izoloni pajisjet IoT në VLAN të veçanta me kontroll të rreptë të qasjes.

5. **Përditësime të Sigurta:** Implementoni mekanizma të sigurt për përditësimin e firmware-it me verifikim të integritetit.

6. **Praktika të Sigurta të Kodimit:** Ndiqni udhëzimet e OWASP për zhvillimin e software-it të sigurt.

7. **Monitorimi i Vazhdueshëm:** Vendosni sisteme për monitorimin e anomalive dhe përgjigje të shpejtë ndaj incidenteve.

8. **Vlerësimi i Rregullt i Sigurisë:** Kryeni teste penetrimi dhe vlerësime të rrezikut në intervale të rregullta.

Me përhapjen e vazhdueshme të teknologjisë IoT, siguria nuk është më opsionale, por një domosdoshmëri për mbrojtjen e privatësisë, sigurisë dhe besueshmërisë së sistemeve tona.

## 8. Referencat

1. OWASP IoT Top 10. (2023). *OWASP Foundation*. https://owasp.org/www-project-internet-of-things/

2. ETSI EN 303 645. (2023). *Cyber Security for Consumer IoT: Baseline Requirements*. European Telecommunications Standards Institute.

3. IoT Security Foundation. (2022). *IoT Security Compliance Framework*. https://www.iotsecurityfoundation.org/

4. ARM. (2024). *Platform Security Architecture*. https://www.arm.com/architecture/security-features/platform-security

5. NIST SP 800-183. (2022). *Networks of 'Things'*. National Institute of Standards and Technology.

6. Antonakakis, M., et al. (2017). *Understanding the Mirai Botnet*. USENIX Security Symposium.

7. Smith, J. (2023). *Mutual TLS in IoT Environments*. IEEE Internet of Things Journal.

8. Jones, M., et al. (2021). *JSON Web Token Best Current Practices*. Internet Engineering Task Force.

9. Elastic. (2024). *Monitoring IoT Devices with the Elastic Stack*. https://www.elastic.co/guide/en/elasticsearch/reference/current/monitoring-iot.html

10. Zephyr Project. (2025). *Security Overview*. https://docs.zephyrproject.org/latest/security/index.html